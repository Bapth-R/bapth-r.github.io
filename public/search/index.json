[{"content":"Introduction Depuis quelque temps, lors des développement Python que je fais, je perds du temps à vérifier si de nouvelles versions des librairies que j\u0026rsquo;utilise sont disponibles. Cela peut s\u0026rsquo;avérer fastidieux, surtout lorsque je dois consulter régulièrement mon fichier requirements.txt où sont répertoriées les bibliothèques utilisées par le projet. Dans cet article, je vais vous expliquer la création de mon projet permettant de rechercher et de mettre à jour le fichier requirements.txt avec les dernières versions des dépendances python et cela de manière automatique. Ce projet se base sur le site : https://pypi.org/, qui centralise toutes les bibliothèques Python.\nDéveloppement Dans cette partie, nous allons nous intéresser au développement de notre code nous permettant de récupérer les dernières versions des librairies sur le site : https://pypi.org/. Bien entendu, le code sera écrit en Python 3 (version 3.12).\nDans un premier temps, nous cherchons à trouver la méthode la plus simple pour qu\u0026rsquo;une personne puisse vérifier si ses dépendances sont à jour et monter de version celles qui ne le sont pas. Nous avons opté pour qu\u0026rsquo;avec une seule commande, les bibliothèques se mettent à jour. Il faudra alors écrire la commande suivante en ajoutant des arguments optionnels afin de spécifier au code d\u0026rsquo;effectuer certaines actions :\ncheck-library Après nous être intéressés à l\u0026rsquo;interaction utilisateur, nous devons savoir comment aller chercher les dernières versions des bibliothèques utilisées. Pour cela, nous allons parcourir le fichier où sont stockées les bibliothèques utilisées (par défaut, le fichier requirements.txt). Dans un second temps, nous allons utiliser le flux RSS, un type de format Web facilement compréhensible par un bot, des librairies utilisées dans le projet afin de déterminer si ces bibliothèques possèdent des versions supérieures à celles utilisées dans le projet. À la fin de ce processus, cela créera un nouveau fichier nommé requirement-output.txt avec les nouvelles versions des dépendances. Voici un schéma explicatif de tout le processus : Nous avons également ajouté par défaut une partie \u0026ldquo;verbose\u0026rdquo; nous indiquant si la bibliothèque scannée est à jour ou non. Nous détaillerons dans la partie \u0026ldquo;Utilisation\u0026rdquo; toutes les possibilités de personnalisation de ce code afin que ce programme soit apprécié par le plus grand nombre.\nPour finir, voici un exemple d\u0026rsquo;utilisation de la bibliothèque : Publication Après nous être assurés que notre programme est correct, nous devons le publier sur le site : https://pypi.org/. Nous allons alors vous expliquer comment procéder.\nAjout d\u0026rsquo;un fichier setup.py Dans un premier temps, nous devons créer un fichier nommé setup.py dans lequel nous allons spécifier toutes les caractéristiques de notre programme. Voici celui que j\u0026rsquo;ai utilisé :\nfrom setuptools import setup setup( name=\u0026#39;check_library\u0026#39;, version=\u0026#39;1.0.4\u0026#39;, author=\u0026#39;Bapth\u0026#39;, description=\u0026#39;Check and update libraries in a requirements file \u0026#39;, long_description=open(\u0026#39;README.md\u0026#39;).read(), long_description_content_type=\u0026#39;text/markdown\u0026#39;, url=\u0026#39;https://github.com/Bapth-R/check_library.git\u0026#39;, py_modules=[\u0026#39;check_library\u0026#39;], license = \u0026#39;Apache License, Version 2.0\u0026#39;, install_requires=[ \u0026#39;requests\u0026#39;, ], classifiers=[ \u0026#39;Programming Language :: Python :: 3\u0026#39;, \u0026#39;Operating System :: OS Independent\u0026#39;, ], entry_points={ \u0026#39;console_scripts\u0026#39;: [ \u0026#39;check_library=check_library:main\u0026#39;, ], }, ) Ici, nous spécifions le nom du projet, la version, l\u0026rsquo;auteur, la documentation, la licence, \u0026hellip; Toutes ces informations sont publiques et peuvent être récupérées en faisant, après avoir installé la librairie, la commande suivante :\n\u0026gt;\u0026gt;\u0026gt; pip3 show check_library # Output Name: check-library Version: 1.0.4 Summary: Check and update libraries in a requirements file Home-page: https://github.com/Bapth-R/check_library.git Author: Bapth Author-email: None License: Apache License, Version 2.0 Location: /home/debian/.local/lib/python3.9/site-packages Requires: requests Required-by: Création d\u0026rsquo;un compte sur le site PyPI Afin de publier une nouvelle librairie Python, nous devons nous inscrire sur le site PyPI, ce qui est très simple. Ensuite, il faudra créer un token nous permettant de nous authentifier lorsque nous souhaitons effectuer une modification sur la librairie. Pour cela, il faut se rendre sur l\u0026rsquo;URL : https://pypi.org/manage/account/token/ et générer un token. Le format doit être le suivant : pypi-{170}. Une fois généré, il faut mettre ce token dans le fichier .pypirc qui doit être présent à la racine du projet. Le format de celui-ci doit être (le seul élément à modifier est le mot de passe) :\n[distutils] index-servers = pypi [pypi] repository: https://upload.pypi.org/legacy/ username:__token__ password:pypi-********* Une fois créé, il est judicieux de créer un fichier .gitignore qui permettra de spécifier certains fichiers à ne pas publier sur Github, comme le fichier où est présent le token. Voici le mien :\nvenv/ .pypirc .DS_Store/ __pycache__ dist/ build/ *.pyc *.pyo *.pyd *.egg-info/ Une fois toutes ces étapes effectuées, nous avons créé un dépôt GitHub afin d\u0026rsquo;y stocker notre code et que tout le monde puisse voir quelles sont les actions effectuées par le script.\nAprès la création du repo et le push du code, nous devons publier notre code afin qu\u0026rsquo;il soit téléchargeable en utilisant uniquement la commande : pip3 install check-library. Pour cela, il faut exécuter la commande : python3 setup.py sdist bdist_wheel qui va créer trois dossiers :\nbuild check_library.egg-info dist Une fois fait, nous devons utiliser la commande permettant de publier notre bibliothèque : python3 -m twine upload dist/*. Pour avoir la certitude que notre bibliothèque a bien été publiée, nous pouvons aller sur le site PyPI : https://pypi.org/project/check-library/ Utilisation Dans cette avant-dernière partie, nous allons voir comment utiliser la bibliothèque. La documentation est déjà présente sur mon GitHub : https://github.com/Bapth-R/check_library, cependant, je vais la synthétiser ici.\nComme nous l\u0026rsquo;avons vu au début de cet article, cette librairie se veut la plus simple d\u0026rsquo;utilisation possible. Pour cela, vous pouvez l\u0026rsquo;utiliser sans avoir besoin d\u0026rsquo;être expert. Il suffit de saisir la commande : check_librarydans un terminal. Cela va prendre toutes les librairies présentes dans le fichier requirements.txt, récupérer leurs dernières versions, et créer un fichier nommé requirement-output.txt, qui sera le fichier requirements.txt mis à jour.\nCependant, nous pouvons personnaliser cette librairie afin qu\u0026rsquo;elle puisse répondre à toutes les attentes. Elle peut :\nModifier le nom du fichier requirements.txt si le fichier utilisé pour stocker ses librairies possède un autre nom grâce à l\u0026rsquo;option -p ou --path suivie du nom du fichier.\nModifier le nom du fichier de destination. Par défaut, il sera nommé requirement-output.txt, mais nous pouvons modifier le nom donné par défaut grâce à l\u0026rsquo;option -o ou --output suivie du nom du fichier.\nEnlever l\u0026rsquo;option verbose. Cela n\u0026rsquo;affichera plus les librairies dans le terminal, mais uniquement le message : Requirements file updated quand le programme aura terminé. Pour cela, il faut utiliser l\u0026rsquo;option -v ou --verbose.\nÉcraser le fichier d\u0026rsquo;origine. Afin de ne pas avoir plusieurs fichiers requirements, l\u0026rsquo;option -f ou --force permet d\u0026rsquo;écraser le fichier d\u0026rsquo;input avec les nouvelles versions des librairies.\nL\u0026rsquo;option -h ou --help permet de connaître les personnalisations du script et comment l\u0026rsquo;exécuter.\nExemple d\u0026rsquo;utilisation Nous allons maintenant voir quelques exemples d\u0026rsquo;utilisation afin que cela soit plus clair.\nExemple 1 Dans cet exemple, nous voulons mettre à jour nos librairies depuis le fichier config/requirements.txt. Nous souhaitons que le fichier de sortie soit : config/requirements-output.txt. Pour cela, nous devons exécuter la commande suivante :\n\u0026gt;\u0026gt;\u0026gt; check_library -p config/requirements.txt -o config/requirement-output.txt Exemple 2 Dans cet exemple, nous voulons mettre à jour nos librairies depuis le fichier requirements.txt (par défaut) et que les versions à jour des bibliothèques se remettent dans ce fichier. Pour cela, nous devons utiliser la commande suivante :\n\u0026gt;\u0026gt;\u0026gt; check_library -f En effet, comme le fichier par défaut d\u0026rsquo;input est requirements.txt, nous n\u0026rsquo;avons pas eu besoin de spécifier le chemin du fichier d\u0026rsquo;origine. De plus, nous souhaitons écraser ce fichier afin de le mettre à jour. Il faut alors utiliser l\u0026rsquo;option -f qui va forcer l\u0026rsquo;écrasement du fichier.\nAméliorations Nous allons maintenant nous intéresser aux différentes améliorations que nous pouvons implémenter sur ce programme afin de le rendre plus complet.\nDécouverte de CVE Pour chaque librairies obsolète, nous pouvons vérifier si entre la version marquée dans le fichier contenant les dépendances utilisées par le projet et celles actuelles, des vulnérabilités ont été découvertes. Si oui, donner le score CVSS de chaque vulnérabilité.\nPublication automatique Pour chaque modification du code source publiée sur Github, un workflow pourrait être mise en place afin de publier automatiquement la nouvelle version sur le site PyPI après avoir effectué des tests unitaires au préalable.\nDécouverte automatique des librairies utilisées Une dernière amélioration pourrait être de découvrir automatiquement les librairies utilisées par le projet, puis de générer/modifier le fichier répertoriant les bibliothèques utilisées.\nConclusion En conclusion, la réalisation de ce projet m\u0026rsquo;a permis de ne plus avoir à me préoccuper des versions de mes librairies Python, car le script le fait pour moi. De plus, cela m\u0026rsquo;a permis de comprendre le processus de publication de librairies Python. Si vous trouvez ce projet intéressant, n\u0026rsquo;hésitez pas à aller \u0026ldquo;starrer\u0026rdquo; le projet sur Github :)\n","date":"2024-03-03T00:00:00Z","image":"http://localhost:1313/Pip/python-pip.png","permalink":"http://localhost:1313/posts/python_library/","title":"[Programmation] - Création et publication d'une librairie python (check-library)"},{"content":"Syllabus Ce rapport a été fait dans le cadre de mon cursus à l\u0026rsquo;ENSIBS lors de ma 5ème année du cycle d\u0026rsquo;ingénieur.\nNote: 19/20\nIntroduction LAPSUS$, également connu sous le nom de SaudeGroup, est un groupe de cybercriminels apparu à la fin de l\u0026rsquo;année 2021. Ils communiquent principalement en anglais et en portugais lors de leurs échanges avec les entreprises. Ils se sont rapidement fait connaître en divulguant des données confidentielles de plusieurs entreprises connues telles que Microsoft, NVIDIA, ainsi que des entités gouvernementales comme le ministère de la santé du Brésil. Contrairement aux groupes actuels de cybercriminels, LAPSUS$ ne déploie pas de ransomware après leurs attaques, à l\u0026rsquo;exception de celle dirigée contre le ministère de la santé du Brésil qui en a subit un.\nIl est également à noter que LAPSUS$ n\u0026rsquo;est ni affilié ni sponsorisé par un État, comme ils le répètent souvent sur leur Telegram. Ils piratent et divulguent des données contre de l\u0026rsquo;argent ou des suppressions de limitations matérielles, comme nous le verrons dans le cas de NVIDIA.\nDans ce rapport, nous examinerons le groupe LAPSUS$ afin d\u0026rsquo;essayer de comprendre les motivations de ses membres en effectuant une recherche plus approfondie sur le créateur de ce groupe. Ensuite, nous nous intéresserons aux différentes attaques menées par ce groupe en nous renseignant préalablement sur les techniques, outils et méthodes utilisés par les hackers pour atteindre leurs objectifs. Nous conclurons ce document en nous penchant sur l\u0026rsquo;arrestation et la prétendue fin du groupe LAPSUS$.\nCréation du groupe LAPSUS$ est un groupe de cybercriminels assez récent spécialisé dans le vol de données d\u0026rsquo;entreprise. Il a été créé il y a environ 3 ans par un individu nommé Arion Kurtaj, également connu sous les pseudonymes de Whitedoxbin, Breachbase, Oklaqq, et White. Pour des raisons de simplicité, nous l\u0026rsquo;appellerons dans la suite de ce document uniquement par l\u0026rsquo;un de ses pseudonymes : White.\nNous allons voir dans la suite de cette partie le principal protagoniste du groupe.\nArion Kurtaj alias White À l\u0026rsquo;âge de 16 ans, White se fait connaître sur Internet en vendant et achetant des 0days, c’est-à-dire des vulnérabilités impactant des services informatiques qui n\u0026rsquo;ont fait l\u0026rsquo;objet d\u0026rsquo;aucune publication ou qui n\u0026rsquo;ont aucun correctif public connu. Grâce à cette activité, il réussit à accumuler une somme estimée à environ 14 millions de dollars en bitcoin (BTC). Afin de garantir un minimum d\u0026rsquo;anonymat, tous ses échanges sont effectués avec un compte Telegram ou une adresse e-mail (dox[***]te@pr[***]om et https://t.me/doxbinwhite). Pour trouver ses acheteurs, il utilise de nombreux forums, notamment celui nommé : RAIDForums qui a été fermé par le FBI depuis.\nEn plus de cela, White est un membre fondateur du groupe nommé Infinity Recursion, ayant comme domaine de prédilection le SIM-Swapping et le Swatting, 2 techniques que le groupe LAPSUS$ utilisera pour commenttre ses actes de piratages.\nExplorons maintenant la définition de ces deux termes :\nLe SIM-Swapping permet de voler le numéro de téléphone de quelqu’un afin de pouvoir s’authentifier à ses comptes protégés par le 2FA (2 Factor Authentication) . Le swatting est une pratique de canular téléphonique visant à tromper les services de police de manière anonyme, en simulant une situation d\u0026rsquo;urgence, généralement chez un individu particulier, dans le but de lui causer des problèmes. Sur ce site, il utilise un nouveau pseudo : Everlynn.\nPour continuer ses activités criminelles, White est également un membre actif sur le site doxbin[.]com dont il devient le propriétaire pour 75 000$ en BTC, mais se retrouve contraint de revendre le site peu de temps après vers janvier 2022 pour 20 000$, car il n\u0026rsquo;est pas apprécié au sein de la communauté. Juste avant de le vendre, il divulgue l\u0026rsquo;intégralité du site pour se venger sur Telegram.\nUne analyse des articles sur https://flashpoint.io/blog/doxbin-leak/ et https://cyble.com/blog/sensitive-information-exposed-through-doxbin-data-leak/ a révélé que la fuite de données contient les informations de 41 544 utilisateurs uniques dans lesquelles sont présentes :\nles noms d\u0026rsquo;utilisateur les adresses e-mail les mots de passe Il faut aussi noter que dans la fuite de données, nous pouvons notamment trouver le mot de passe de White que nous ne divulguerons pas.\nAfin de se venger, les membres du forum l\u0026rsquo;ont par la suite doxxé, c\u0026rsquo;est-à-dire qu\u0026rsquo;ils ont révélé ses informations personnelles. Voici une capture d\u0026rsquo;écran montrant certaines données personnelles de White, bien entendu masquées.\nDans ce leak, nous pouvons retrouver des photos de lui enfant, ainsi que des adresses e-mail, des mots de passe, des informations sur sa famille, et bien d\u0026rsquo;autres détails personnels. Par ailleurs, voici une image de lui enfant que nous pouvons retrouver dans ces données :\nMême en étant découvert et possédant toutes ces informations personnelles sur Internet, White est resté comme nous allons le voir un membre actif du groupe LAPSUS$. Interessons nous alors à ce groupe afin de connaitre ses revendications ainsi que ses différents piratages.\nActivités du groupe LAPSUS$ Découverte du groupe LAPSUS$ est un groupe de cybercriminel composé de personnes jeunes dont des mineurs (-18 ans). Ils se sont fait connaitre en décembre 2021 et sont à l\u0026rsquo;origine de nombreuses fuites de données d\u0026rsquo;entreprises de renommé mondiales comme NVIDIA, Microsoft et même Ubisoft. Nous allons voir dans le suite de ce document les méthodes utilisées par ce groupe, puis les différentes attaques qu\u0026rsquo;ils ont ménées.\nMéthodes utilisées par ce groupe LAPSUS$ utilise une large diversité de tactiques, techniques et procédures, cependant, ils préfèrent utiliser des failles humaines afin de réussir à arriver à leur objectif ce qui ne nécessite pas de techniques avancées en sécurité informatique. Nous pouvons en effet, retrouver un message sur leur Telegram essayant de recruter des personnes travaillant dans une des sociétés qu\u0026rsquo;ils avaient pour cible afin qu\u0026rsquo;ils leurs fournissent un accès initial : Comme nous venons de le voir, le principal canal de communication est Telegram et une adresse mail:\nt[.]me/min\u0026hellip;r (Ouvert) — Salon de revendication d’attaque t[.]me/s…t (Supprimé) — Salon permettant de discuter avec la communauté et faire des sondages permettant de décider quel sera le prochain leak. sa\u0026hellip;up@ct\u0026hellip;ar.com Après avoir découvert leurs moyens de communication, nous allons nous intéresser aux différentes attaques qu\u0026rsquo;ils ont menées.\nAttaques menées Nous allons maintenant nous intéresser aux différentes attaques perpétrées par ce groupe dans un ordre chronologique. Nous allons nous appercevoir qu\u0026rsquo;en seulement 2 mois, de nombreuses entreprises ont subi des attaques et ont perdu des données précieuses.\nMinistère de la santé du Brésil ⚠️ Un lien est présent sur leur Telegram permettant de télécharger des données du ministère\nLeur première attaque connue a été faite et revendiquée le 10 décembre 2021, prenant pour cible le ministère de la santé du Brésil. Bien que peu relayée médiatiquement, cette attaque a permis au groupe d\u0026rsquo;attaquants de dérober environ 50 To de données. Pour conclure sur cette attaque, le site du ministère a également été effacé, exposant ainsi le message suivant:\nUne communication a été faite par la suite sur leur Telegram annoncant cette compromission. Cela a été leur première communication : Claro et Embratel ℹ️ Aucun lien n\u0026rsquo;est présent sur leur Telegram permettant de télécharger les données\nQuatorze jours plus tard, le groupe revendique deux autres attaques, affirmant avoir réussi à pirater les entreprises Claro et Embratel le 24 décembre 2021. Dans ces cas également, le groupe demande une somme d\u0026rsquo;argent afin de ne pas divulguer des informations sur les sociétés, représentant une taille de 10 000 To de documents confidentiels.\nImpresa ℹ️ Nous n\u0026rsquo;avons pas réussi à avoir un lien nous permettant de télécharger les données\nDans la suite de ces attaques, le 1er janvier 2022, l\u0026rsquo;entreprise Impresa a subi une attaque du groupe LAPSUS$, lors de laquelle le groupe a pris le contrôle des actualités, envoyé des e-mails de phishing à tous les abonnés d’Impresa, et rédigé un tweet sous le nom d’Expresso (un média dont Impresa est propriétaire) revendiquant le groupe LAPSUS$ comme le nouveau président du Portugal : Localiza ℹ️ Aucun lien n\u0026rsquo;est présent sur leur Telegram permettant de télécharger les données\nAprès l\u0026rsquo;attaque impactant Impressa, il n\u0026rsquo;a pas fallu attendre plus de 10 jours pour que le groupe revendique une autre attaque sur l\u0026rsquo;entreprise Localiza. Afin de prouver l\u0026rsquo;attaque aux yeux de tout le monde et pour faire le plus de bruit possible, ils ont redirigé le site de l\u0026rsquo;entreprise de location de voitures vers un site pour adultes, en se vantant de leur exploit sur Telegram :\nVodafone ℹ️ Aucun lien n\u0026rsquo;est présent sur leur Telegram permettant de télécharger les données\nLe 8 février 2022, le groupe refait parler de lui après l’attaque réussie contre Vodafone. Le 11 février, le groupe affirme sur leur Telegram qu’ils ont réussi à voler environ 500Gb de données. On apprendra le 7 mars que ces données représentent environ 5000 repository Github.\nCette fuite de donnée fait suite au sondage qu\u0026rsquo;ils ont fait sur leur Telegram, où ils demandaient quelles informations leurs followers voulaient voir divulguées. C\u0026rsquo;est l\u0026rsquo;entreprise Vodafone qui a malheureusement \u0026ldquo;remporté\u0026rdquo; le sondage:\nNVIDIA ⚠️ Un lien est présent sur leur Telegram permettant de télécharger des données de NVIDIA\nLe groupe a par la suite fait une \u0026ldquo;pause\u0026rdquo; de 17 jours avant de rendre publique leur attaque sur NVIDIA le 25 février 2022. Par rapport aux autres attaques, celle-ci a pris plus d\u0026rsquo;ampleur. Le PDG de NVIDIA à l\u0026rsquo;époque, Jensen Huang, a été interviewé sur la chaîne Yahoo Finance afin de parler du piratage que subissait son entreprise :\nPDG NVIDIA vidéo.\nPar rapport aux autres attaques, les pirates avaient de réelles revendications afin de ne pas révéler les informations qu\u0026rsquo;ils avaient réussi à voler. Au total, environ 1 To de données ont été exfiltrées. Cela comprenait, selon LAPSUS$ :\nSchéma de cartes Drivers Firmwares \u0026hellip; Le 28 février, LAPSUS$ publie ce message sur son Telegram revendiquant l\u0026rsquo;attaque.\nQuelques heures après, le premier leak est partagé sur leur Telegram, et ils demandent par la même occasion de désactiver la limitation LHR (une protection contre le minage de cryptomonnaies) pour les cartes NVIDIA, ce qui réjouit certaines personnes sur Reddit.\nDans les informations révélées, des certificats de signature de code de NVIDIA ont permis à des malwares d\u0026rsquo;être signés par NVIDIA, contournant ainsi les antivirus.\nDeux jours après, le 1er mars, le groupe LAPSUS$ demande à NVIDIA que les drivers des GPU pour Windows, MacOS et Linux soient désormais open source pour toujours. Cependant, NVIDIA ne répondra pas. À cause de cela, une fuite de données de 71 000 comptes d\u0026rsquo;employés est révélée.\nQuelques jours avant cette dernière revendication, NVIDIA a contre-attaqué le groupe en implantant un ransomware sur les machines de LAPSUS$. Le groupe a confirmé ces propos sur leur second canal Telegram :\nSamsung ⚠️ Un lien est présent sur leur Telegram permettant de télécharger des données de Samsung\nLe 4 mars 2022, le groupe revendique une attaque contre Samsung, affirmant avoir volé de nombreuses informations et mettant à leur habitude un fichier torrent contenant au moins une partie des informations dérobées.\nUbisoft ℹ️ Aucun lien n\u0026rsquo;est présent sur leur Telegram permettant de télécharger les données\nLe 12 mars, le groupe revendique une attaque sur Ubisoft, mais aucune donnée n\u0026rsquo;est fournie. Les informations à ce sujet sont minimes.\nMicrosoft ⚠️ Un lien est présent sur leur Telegram permettant de télécharger des données de Microsoft\nMicrosoft est le prochain à subir une fuite de données le 20 mars, mais la plupart des informations relatives au piratage ont été supprimées de leur Telegram. Cependant, nous avons réussi à récupérer plusieurs publications avant la suppression, dans lesquelles ils disaient avoir :\n90% du code source de Bing Maps 45% du code source de Cortana et Bing Corrompu un Azure DevOps LG ⚠️ Un lien est présent sur leur Telegram permettant de télécharger des données de LG\nDeux jours après, le 22 mars, LG subit une fuite de données. Sur la publication de revendication, le groupe LAPSUS$ se moque de la compagnie en disant qu\u0026rsquo;en seulement 1 an, le groupe a subit 2 cyberattaques. Les criminels publient alors une liste de tous les hash des employés et services de LG.\nOkta ⚠️ Un lien est présent sur leur Telegram permettant de télécharger des données de Okta\nLe 22 mars, le même jour que la divulgation des données de LG, le groupe publie un message revendiquant une attaque contre Okta. Ils partagent de nombreuses captures d\u0026rsquo;écran où on les voit comme administrateurs.\nCependant, le même jour, Okta publie un article expliquant qu\u0026rsquo;ils n\u0026rsquo;ont pas subi d\u0026rsquo;attaque : Okta Statement. Ces informations ont été démenties et mal prises par le groupe LAPSUS$.\nUn jour plus tard, Okta publie un nouveau communiqué dans lequel ils expliquent avoir été victimes d\u0026rsquo;une attaque, mais que l\u0026rsquo;impact est faible : Okta\u0026rsquo;s Investigation of the January 2022 Compromise.\nGlobant ⚠️ Un lien est présent sur leur Telegram permettant de télécharger des données de Globant\nLa dernière revendication d\u0026rsquo;attaque a été faite le 30 mars sur l\u0026rsquo;entreprise Globant, où 70 Go de données ont été volées et publiées, ainsi que des accès sur GitHub, Jira, Crucible et Confluence.\nVoici un récapitulatif des attaques menées par Lapsus$ provenant d’un rapport de Intrinsec :\nArrestations Le 21 mars, le FBI publie un article afin de solliciter des informations sur le groupe LAPSUS$ en vue de les arrêter, suite à la fuite de données que l\u0026rsquo;entrepirse Microsoft a subie. Deux jours après la publication du FBI, le 23 mars, le groupe annonce sur Telegram qu\u0026rsquo;il prend une semaine de vacances :\nCependant, cette information coincide avec un article de la BBC paru le 24 mars 2022 annonçant que 7 adolescents affiliés au groupe LAPSUS$ ayant entre 16 et 21 ans ont été arrêtés (dont White): https://www.bbc.com/news/technology-60864283\nCependant, une semaine après, le 30 mars, des messages ont été publié sur leur Telegram revendiquant l’attaque de Globant. Après cela, leur Telegram n’a plus été actif.\nLa dernière apparition de LAPSUS$ a été avec le leak de GTA 6, en septembre 2022, cependant nous soupçonnons White d’avoir agit tout seul et non avec le groupe. De plus leur Telegram n’a pas revendiqué ce leak.\nConclusion En conclusion, nous avons observé que le groupe LAPSUS$ a mené des attaques contre de nombreuses entreprises ainsi qu\u0026rsquo;une entité gouvernementale brésilienne. Leur approche repose souvent sur l\u0026rsquo;ingénierie sociale et le phishing, des méthodes qui ne nécessitent pas nécessairement des compétences techniques avancées. Les 0days sont rarement utilisés, privilégiant plutôt des méthodes visant à élever leurs privilèges après avoir obtenu un accès initial.\nNous avons également noté la rapidité d\u0026rsquo;action du groupe, ayant réussi en seulement 3 mois à compromettre et divulguer massivement des données d\u0026rsquo;entreprises telles que Microsoft, Ubisoft et NVIDIA.\nEnfin, même après les arrestations et la dissolution du groupe, le fondateur de LAPSUS$, White, a réussi à faire fuiter une partie du code source de GTA 6. Cela remet en lumière le groupe, suscitant des inquiétudes quant à une éventuelle résurgence et la possibilité qu\u0026rsquo;il continue à semer la terreur pendant des mois.\nSources https://www.cisa.gov/sites/default/files/2023-08/CSRB_Lapsus%24_508c.pdf\nhttps://www.intrinsec.com/analysis-of-lapsus-intrusion-set/\nhttps://unit42.paloaltonetworks.com/lapsus-group/\nhttps://www.theverge.com/22998479/lapsus-hacking-group-cyberattacks-news-updates\nhttps://www.lemonde.fr/pixels/article/2023/12/22/lapsus-un-pirate-a-l-origine-du-hack-de-gta-vi-place-a-l-hopital-par-la-justice-britannique_6207274_4408996.html\nhttps://securityboulevard.com/2022/03/hackers-gaining-power-of-subpoena-via-fake-emergency-data-requests/\nhttps://www.theverge.com/2022/3/23/22993731/lapsus-hacking-group-teenager-mastermind\nL’étonnant profil du groupe cybercriminel LAPSUS$ - Next\nhttps://www.usine-digitale.fr/article/le-ministere-de-la-sante-bresilien-victime-d-une-cyberattaque-les-donnees-de-vaccination-ciblees.N1168357\nhttps://revistaoeste.com/politica/grupo-hacker-invade-outros-sites-do-governo-federal-e-xinga-bolsonaro/\nhttps://www.databreachtoday.asia/lapsus-attacks-localiza-redirects-users-to-porn-site-a-18286\nhttps://www.silentpush.com/blog/lapsus-group-an-emerging-dark-net-threat-actor/\nhttps://www.intrinsec.com/wp-content/uploads/2022/03/INTRINSEC-LAPSUS-Intrusion-Set-20220324.pdf\nhttps://www.youtube.com/watch?v=tyg7fCPneWk\nhttps://www.wired.com/story/lapsus-hacking-group-extortion-nvidia-samsung/\nhttps://www.databreaches.net/nvidia-breached-by-attackers-who-seem-shocked-by-hack-back/\nhttps://twitter.com/vxunderground/status/1497484483494354946\n","date":"2024-01-27T00:00:00Z","image":"http://localhost:1313/LAPSUS.webp","permalink":"http://localhost:1313/posts/lapsus/","title":"[CTI] - LAPSUS$"},{"content":"test\n","date":"2024-01-23T00:00:00Z","permalink":"http://localhost:1313/posts/linkedin/","title":"[Découverte] - Découverte et collecte d'information sur Linkedin"}]